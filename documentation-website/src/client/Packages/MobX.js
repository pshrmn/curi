import React from "react";
import { Link } from "@curi/react";

import BasePackage from "./base/BasePackage";
import APIBlock from "./base/APIBlock";
import {
  PrismBlock,
  InlineJS as IJS,
  InlineComponent as Cmp
} from "../components/PrismBlocks";
import { Section } from "../components/Sections";

export default ({ name, version, globalName }) => (
  <BasePackage
    name={name}
    version={version}
    globalName={globalName}
    about={
      <p>
        This package allows you to synchronize the response objects generated by
        Curi with MobX. Whenever location changes occur, the store will be
        updated.
      </p>
    }
  >
    <APIBlock>
      <PrismBlock lang="javascript">
        {`import CuriStore from '@curi/mobx';`}
      </PrismBlock>

      <Section tag="h3" title="CuriStore" id="CuriStore">
        <p>
          <IJS>CuriStore</IJS> will store responses. When creating a store you
          just need to pass it your router and the store will automatically
          listen for new responses and update itself.
        </p>
        <PrismBlock lang="javascript">
          {`const router = curi(history, routes);
const curiStore = new CuriStore(router);`}
        </PrismBlock>
        <p>
          With React, you can use the <Cmp>Provider</Cmp> from{" "}
          <IJS>mobx-react</IJS> to make your store available to components. You
          would then use the <IJS>inject</IJS> higher-order component to inject
          the Curi props into components. For example, you would inject the{" "}
          <IJS>router</IJS>, <IJS>response</IJS>, and <IJS>navigation</IJS>{" "}
          props into your <Cmp>CuriBase</Cmp>.
        </p>
        <PrismBlock lang="javascript">
          {`const ReactiveBase = inject(({ curi }) => ({
  router: curi.router,
  response: curi.response,
  navigation: curi.navigation
}))(observer(CuriBase));`}
        </PrismBlock>
        <PrismBlock lang="jsx">
          {`ReactDOM.render((
  <Provider curi={curiStore}>
    <ReactiveBase render={...}/>
  </Provider>
), holder);`}
        </PrismBlock>
      </Section>
    </APIBlock>
  </BasePackage>
);
