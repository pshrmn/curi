(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{40:function(e,t,n){"use strict";n.r(t),n.d(t,"component",function(){return p}),n.d(t,"contents",function(){return d});var a=n(0),r=n.n(a),o=n(3),l=n(22),i={title:"Route Interactions"},u={title:"Calling Intearctions",hash:"calling"},c={title:"Built-in Interactions",hash:"built-in"},s={title:"Adding Interactions",hash:"adding"},m={title:"Slightly more advanced",hash:"Slightly-more-advanced"},h={title:"Creating Route Interactions",hash:"creating",children:[m]},d=[u,c,s,h];function p(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(l.f,null,r.a.createElement("h1",null,i.title),r.a.createElement("p",null,"Route interactions let you interact with a registered route using its name."),r.a.createElement("p",null,"A registered route is generally any route that is in the array of routes that you used to create your router. However, some interactions only register routes that meet some criteria. For example, the"," ",r.a.createElement(o.a,{name:"Package",params:{package:"route-prefetch"}},r.a.createElement(l.d,null,"prefetch"))," ","interaction only registers routes with a ",r.a.createElement(l.d,null,"resolve")," property.")),r.a.createElement(l.c,{meta:u},r.a.createElement("p",null,"Every interaction has a unique ",r.a.createElement(l.d,null,"name"),". The interaction can be called as a property of a route's ",r.a.createElement(l.d,null,"route")," object. The first argument to the call is always the name of the route to interact with. Some interactions may also take additional arguments."),r.a.createElement(l.b,null,'router.route.myInteraction("Home");\nrouter.route.otherInteraction("User", false);')),r.a.createElement(l.c,{meta:c},r.a.createElement("p",null,"Curi comes with two built-in interactions: ",r.a.createElement(l.d,null,"pathname")," and"," ",r.a.createElement(l.d,null,"active"),"."),r.a.createElement("p",null,"The ",r.a.createElement(l.d,null,"pathname")," interaction is used to generate a pathname string for a route. This is done using the route's name and an object of route params (if they are necessary)."),r.a.createElement(l.b,null,'router.route.pathname("User", { id: 1 });'),r.a.createElement("p",null,"The ",r.a.createElement(l.d,null,"active")," interaction determines if a route is active by comparing it to a ",r.a.createElement(l.d,null,"response")," object."),r.a.createElement(l.b,null,'router.route.active("Home", response);')),r.a.createElement(l.c,{meta:s},r.a.createElement("p",null,"Route interactions are attached to routes using the second argument to"," ",r.a.createElement(l.d,null,"prepareRoutes"),", which is an array of route interactions."),r.a.createElement("p",null,"The router will make the interactions that it receives from its"," ",r.a.createElement(l.d,null,"routes")," available through its ",r.a.createElement(l.d,null,"route")," property."),r.a.createElement(l.b,null,"const routes = prepareRoutes(\n  routes,\n  [createMyInteraction()] // name = myInteraction\n);\nconst router = createRouter(browser, routes);\nrouter.route // all interactions")),r.a.createElement(l.c,{meta:h},r.a.createElement("p",null,"Curi provides some interactions for common use cases, but you may have need to create a custom interaction. There are a few steps to creating your own route interactions."),r.a.createElement("p",null,"While not strictly require, interactions are commonly created from a function so that multiple instances of the interaction can be safely created."),r.a.createElement("p",null,"For this example, we'll create an interaction that confirms that a route is registered."),r.a.createElement(l.b,null,"function confirmInteraction() {\n  ...\n}"),r.a.createElement("p",null,"The function should return an object with three properties:"," ",r.a.createElement(l.d,null,"name"),", ",r.a.createElement(l.d,null,"register"),", and ",r.a.createElement(l.d,null,"get"),"."),r.a.createElement(l.c,{tag:"h3",meta:{title:"name",hash:"property-name"}},r.a.createElement("p",null,"A unique identifier for the route interaction.")),r.a.createElement(l.c,{tag:"h3",meta:{title:"register",hash:"property-register"}},r.a.createElement("p",null,"A function to internally store data about routes. The stored data will be accessible from the interaction's ",r.a.createElement(l.d,null,"get")," method."),r.a.createElement("p",null,"The first argument to ",r.a.createElement(l.d,null,"register"),' is the "public" data for a route, such as its ',r.a.createElement(l.d,null,"name")," and route param ",r.a.createElement(l.d,null,"keys"),". Data should be stored using the route's ",r.a.createElement(l.d,null,"name"),"."),r.a.createElement("p",null,"The second argument, which is optional, is data from the route's parent. If a ",r.a.createElement(l.d,null,"register")," method returns a value, the returned value will be passed as the second value when registering the route's children routes.")),r.a.createElement(l.c,{tag:"h3",meta:{title:"get",hash:"property-get"}},r.a.createElement("p",null,"A function that will receive a route's name (and possibly other arguments) and perform some task using the related route. If the interaction's ",r.a.createElement(l.d,null,"register")," method stored data about the route, it can be read here.")),r.a.createElement("p",null,"With these properties, we can create our confirmation interaction."),r.a.createElement(l.b,null,"function confirmInteraction() {\n  // maintain a set of known routes\n  const knownRoutes = new Set();\n  return {\n    name: 'confirm',\n    // when a route is registered,\n    // we store it using its name\n    register: route => {\n      knownRoutes.add(route.name);\n    },\n    // get checks the known routes to see if one exists\n    // with the requested name\n    get: (name) => {\n      return knownRoutes.has(name);\n    }\n  };\n}"),r.a.createElement("p",null,"In your application, you can import it, call the factory to create the interaction, and register the interaction when you create the router."),r.a.createElement(l.b,null,"import { curi, prepareRoutes } from '@curi/router';\nimport createConfirmation from './interactions/confirm'\n\nconst routes = prepareRoutes(\n  [{ name: 'Home', path: '' }],\n  [createConfirmation()]\n);\n\nconst router = createRouter(browser, routes);\n\nrouter.route.confirm('Home'); // true\nrouter.route.confirm('Elsewhere'); // false"),r.a.createElement(l.c,{meta:m,tag:"h3"},r.a.createElement("p",null,"For a more advanced example, we can take advantage of the second argument to ",r.a.createElement(l.d,null,"register"),"."),r.a.createElement("p",null,"For root routes (no parent route), the second argument will be"," ",r.a.createElement(l.d,null,"undefined"),". For nested routes, this is the value returned by the parent route's ",r.a.createElement(l.d,null,"register")," function."),r.a.createElement(l.b,null,"function parentInteraction() {\n  const routeTree = {};\n  return {\n    name: 'routeParent',\n    register: (route, parent) => {\n      routeTree[route.name] = parent;\n      // we return route.name and any child routes will\n      // receive that as their parent value\n      return route.name;\n    },\n    get: (name) => {\n      return routeTree[name];\n    }\n  }\n}"),r.a.createElement("p",null,"Curi handles passing the return value of ",r.a.createElement(l.d,null,"register")," to the route's children automatically."))))}}}]);