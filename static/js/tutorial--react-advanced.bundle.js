(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{26:function(e,t,n){"use strict";n.r(t),n.d(t,"component",function(){return y}),n.d(t,"contents",function(){return g});var a=n(0),r=n.n(a),o=n(2),l=n(24),i={title:"Demo",hash:"demo"},s={title:"Setup",hash:"setup"},u={title:"Initial Render",hash:"initial-render"},c={title:"Asynchronous Routes",hash:"async",children:[u]},m={title:"Code Splitting",hash:"code-splitting"},d={title:"Code Splitting in Routes",hash:"code-splitting-routes",children:[m]},h={title:"The Fake API",hash:"fake-api"},p={title:"Preloading Data",hash:"preloading-data",children:[h]},f={title:"Link is navigating?",hash:"link-navigating"},b={title:"Visualizing Loading",hash:"loading",children:[f]},E={title:"Async Caveats",hash:"caveats"},g=[i,s,c,d,p,b,E];function y(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(l.k,{title:"React Advanced Tutorial"},r.a.createElement(l.i,null,"In this tutorial, we will be expanding on the website built in the"," ",r.a.createElement(o.a,{name:"Tutorial",params:{slug:"react-basics"}},"React basics tutorial"),". We will take advantage of Curi's async features to add code splitting and data preloading to the application."),r.a.createElement(l.h,null,r.a.createElement("li",null,"Add code splitting to routes."),r.a.createElement("li",null,"Preload route data with asynchronous navigation."))),r.a.createElement(l.e,{meta:i,tag:"h2"},r.a.createElement(l.i,null,"You can run a demo of the site we are building with CodeSandbox."),r.a.createElement(l.c,{id:"github/curijs/react-advanced-tutorial/tree/master/",title:"Curi React advanced tutorial"})),r.a.createElement(l.e,{meta:s,tag:"h2"},r.a.createElement(l.i,null,"If you did not complete the React basics tutorial, you should either clone its"," ",r.a.createElement("a",{href:"https://github.com/curijs/react-basic-tutorial/"},"repo")," or fork its"," ",r.a.createElement("a",{href:"https://codesandbox.io/s/github/curijs/react-basic-tutorial/tree/master/"},"sandbox"),"."),r.a.createElement(l.i,null,"If you are cloning the repo, you should also install its dependencies and then start the development server."),r.a.createElement(l.b,{lang:"bash"},"git clone https://github.com/curijs/react-basic-tutorial react-advanced-tutorial\ncd react-advanced-tutorial\nnpm install\nnpm run start")),r.a.createElement(l.e,{meta:c,tag:"h2"},r.a.createElement(l.i,null,"Curi lets you attach async functions to a route through its"," ",r.a.createElement(l.f,null,"resolve")," function. When that route matches, a response will not be emitted until the ",r.a.createElement(l.f,null,"resolve")," has resolved."),r.a.createElement(l.i,null,r.a.createElement(l.f,null,"resolve")," be passed an object of the matched route properties, which you may use to specify what data to load."),r.a.createElement(l.i,null,"The results of the async functions will be available in a route's"," ",r.a.createElement(l.f,null,"respond")," function through the ",r.a.createElement(l.f,null,"resolved")," object. Each result will be stored in the object using the async function's name."),r.a.createElement(l.i,null,"If any of the async functions throws an uncaught error, that error will be available in the ",r.a.createElement(l.f,null,"respond")," function through the"," ",r.a.createElement(l.f,null,"error")," property. That said, it is preferable for you to catch and handle the errors yourself."),r.a.createElement(l.b,null,'{\n  name: "A Route",\n  path: "route/:id",\n  resolve({ params }) {\n    let body = import("./components/SomeComponent")\n      .then(preferDefault);\n    let data = fetch(`/api/data/${params.id}`);\n    return Promise.all([ component, data ]);\n  },\n  respond({ resolved, error }) {\n    if (error) {\n      // handle an uncaught error\n    }\n    let [body, data] = resolved;\n    return { body, data };\n  }\n}'),r.a.createElement(l.g,null,r.a.createElement(l.i,null,"These async functions are called every time a route matches. If you have functions that should re-use the results from previous calls, you will probably want to implement some caching. Curi provides a"," ",r.a.createElement(o.a,{name:"Package",params:{package:"helpers",version:"v2"},hash:"once"},r.a.createElement(l.f,null,"once"))," ","function for simple caching, but leaves more advanced caching solutions to the user.")),r.a.createElement(l.i,null,"Curi uses Promises to manage async code, so async functions should return Promises. ",r.a.createElement(l.f,null,"Promise.resolve")," can be used to wrap a return value in a Promise."),r.a.createElement(l.b,null,'import { preferDefault } from "@curi/helpers";\n\nlet routes = prepareRoutes([\n  {\n    name: "A Route",\n    path: "route/:id",\n    resolve({ params }) {\n      let body = import("./components/SomeComponent")\n        .then(preferDefault);\n      let data = fetch(`/api/data/${params.id}`);\n      return Promise.all([ component, data ]);\n    },\n    respond({ resolved, error }) {\n      if (error) {\n        // handle an uncaught error\n      }\n      let [body, data] = resolved;\n      return { body, data };\n    }\n  }\n]);'),r.a.createElement(l.d,{meta:u,tag:"h3"},r.a.createElement(l.i,null,"There is one caveat to async routes: we cannot safely render the application immediately on load because the initial response might not be ready yet."),r.a.createElement(l.i,null,"Curi does not emit a response object to its observers until it is ready. If the initial route that matches is asynchronous, then there is a delay between when the application is ready to render and when there is a response to render."),r.a.createElement(l.i,null,"If you attempt to render immediately after creating a router and the initial response is still being created, the ",r.a.createElement(l.f,null,"response")," ","that will be passed to the ",r.a.createElement(l.f,null,"Router"),"'s ",r.a.createElement(l.f,null,"children")," ","will be ",r.a.createElement(l.f,null,"undefined"),"."),r.a.createElement(l.i,null,"There are a few possible ways to handle this situation."),r.a.createElement(l.i,null,"The first is to delay rendering by placing your"," ",r.a.createElement(l.f,null,"ReactDOM.render")," call inside of a ",r.a.createElement(l.f,null,"router.once")," ","callback. This will guarantee that the render isn't called until the first response is ready."),r.a.createElement(l.b,null,"// delay rendering\nrouter.once(() => {\n  ReactDOM.render((\n    <Router>\n      <App />\n    </Router>\n  ), holder);\n});\n"),r.a.createElement(l.i,null,"Alternatively, you can update the root ",r.a.createElement(l.f,null,"App")," component to detect when the ",r.a.createElement(l.f,null,"response")," is ",r.a.createElement(l.f,null,"undefined")," and render a loading message."),r.a.createElement(l.b,null,"// render fallback when response is null\nfunction App() {\n  let { response } = useResponse();\n  if (response === undefined) {\n    return <Paragraph>Loading...</Paragraph>;\n  }\n  let { body:Body } = response;\n  return <Body response={response} />;\n}"),r.a.createElement(l.i,null,"Which approach is best will depend on the specifics of an application. If there are routes that will take a long time for the initial load, you will probably want to render something while they load. For async code with short loading times, a blank screen might be more acceptable.")),r.a.createElement(l.i,null,"For more information on async route properties, please refer to the"," ",r.a.createElement(o.a,{name:"Guide",params:{slug:"routes"}},"routes guide"),".")),r.a.createElement(l.e,{meta:d,tag:"h2"},r.a.createElement(l.i,null,"Currently, the ",r.a.createElement(l.f,null,"routes.js")," module imports all of the route modules at the top of the file. This results in a single bundle of all of a website's code. This can be improved by adding code splitting to an application, which will result in more, but smaller, bundles."),r.a.createElement(l.d,{meta:m,tag:"h3"},r.a.createElement(l.i,null,'Code splitting works by "dynamically" importing modules using the'," ",r.a.createElement(l.f,null,"import")," function. When bundlers like Webpack see"," ",r.a.createElement(l.f,null,"import")," functions, they know to create a separate bundle for that module (and that module's imports, etc.)."),r.a.createElement(l.i,null,"You can set a chunk's name using the"," ",r.a.createElement("a",{href:"https://webpack.js.org/api/module-methods/#magic-comments"},r.a.createElement(l.f,null,"webpackChunkName"))," ","magic comment with an ",r.a.createElement(l.f,null,"import")," call."),r.a.createElement(l.i,null,"Create React App's default configuration is already setup to support code splitting, but if you were creating your own Webpack configuration, you would need to use"," ",r.a.createElement("a",{href:"https://webpack.js.org/configuration/output/#output-chunkfilename"},r.a.createElement(l.f,null,"output.chunkFilename"))," ","to support code splitting."),r.a.createElement(l.b,null,'// this creates a "Test" bundle\nimport(/* webpackChunkName: "Test" */ "./components/Test.js")'),r.a.createElement(l.i,null,r.a.createElement(l.f,null,"import")," returns a module object, so if you want to access a module's default export, you can use a ",r.a.createElement(l.f,null,"then")," function to get that value."),r.a.createElement(l.b,null,'import("some-module.js")\n  .then(module => module.default)')),r.a.createElement(l.i,null,"Currently ",r.a.createElement(l.f,null,"respond")," function returns an object whose"," ",r.a.createElement(l.f,null,"body")," property is a module imported at the top of the file. In order to add code splitting to routes, we can add a"," ",r.a.createElement(l.f,null,"resolve")," function that imports the module."),r.a.createElement(l.i,null,"The ",r.a.createElement(l.f,null,"@curi/helpers")," package provides a"," ",r.a.createElement(l.f,null,"preferDefault")," function. This function will return an imported module's default property if it exists, and returns the entire module if it doesn't have a default property."),r.a.createElement(l.b,null,'import { preferDefault } from "@curi/helpers";\n\nlet routes = prepareRoutes([\n  {\n    name: "Test",\n    path: "test",\n    resolve() {\n      return import(\n        /* webpackChunkName: "Test" */ "./components/Test.js"\n      ).then(preferDefault);\n    }\n  }\n]);'),r.a.createElement(l.i,null,"When a module fails to load, the error will be passed to the"," ",r.a.createElement(l.f,null,"respond")," function through the ",r.a.createElement(l.f,null,"error")," property. We won't be incorporating this into the application here, but in a real application you probably want to have a fallback component to display an error message (especially if you have an offline mode with service workers)."),r.a.createElement(l.b,null,'import displayLoadError from "./components/LoadError";\n\nlet routes = prepareRoutes([\n  {\n    name: "One",\n    path: "one",\n    resolve() {\n      return import("./components/One.js")\n        .then(preferDefault)\n        .catch(err => displayLoadError(err);\n    },\n    respond({ resolved }) {\n      return {\n        body: resolved\n      };\n    }\n  }\n]);'),r.a.createElement(l.i,null,"We can now update the ",r.a.createElement(l.f,null,"routes.js")," module to remove the imports at the top of the file and use ",r.a.createElement(l.f,null,"import")," to import the route components. We will use ",r.a.createElement(l.f,null,"preferDefault")," to only resolve the component instead of the entire module object."),r.a.createElement(l.i,null,"The ",r.a.createElement(l.f,null,"respond")," functions should also be updated to set the return object's ",r.a.createElement(l.f,null,"body")," property to ",r.a.createElement(l.f,null,"resolved.body")," ","instead of the import at the top of the file."),r.a.createElement(l.b,{"data-line":"3,10-16,21-27,32-38,43-49"},'// src/routes.js\nimport { prepareRoutes } from "@curi/router";\nimport { preferDefault } from "@curi/helpers";\n\nexport default prepareRoutes([\n  {\n    name: "Home",\n    path: "",\n    resolve() {\n      return import("./components/Home")\n        .then(preferDefault);\n    },\n    respond({ resolved }) {\n      return { body: resolved };\n    }\n  },\n  {\n    name: "Book",\n    path: "book/:id",\n    resolve() {\n      return import("./components/Book")\n        .then(preferDefault);\n    },\n    respond({ resolved }) {\n      return { body: resolved };\n    }\n  },\n  {\n    name: "Checkout",\n    path: "checkout",\n    resolve() {\n      return import("./components/Checkout")\n        .then(preferDefault);\n    },\n    respond({ resolved }) {\n      return { body: resolved };\n    }\n  },\n  {\n    name: "Catch All",\n    path: "(.*)",\n    resolve() {\n      return import("./components/NotFound")\n        .then(preferDefault);\n    },\n    respond({ resolved }) {\n      return { body: resolved };\n    }\n  }\n]);'),r.a.createElement(l.i,null,"For this tutorial, we will use ",r.a.createElement(l.f,null,"router.once")," to delay the initial render while we wait for the initial response. We should update the ",r.a.createElement(l.f,null,"index.js")," module to do this."),r.a.createElement(l.b,{"data-line":"22-28"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createRouter, announce } from \"@curi/router\";\nimport { browser } from '@hickory/browser';\nimport { createRouterComponent } from '@curi/react-dom';\n\nimport routes from './routes';\nimport './index.css';\nimport NavMenu from './components/NavMenu';\nimport registerServiceWorker from './registerServiceWorker';\n\nlet router = createRouter(browser, routes, {\n  sideEffects: [\n    announce(({ response }) => {\n      return `Navigated to ${response.location.pathname}`;\n    })\n  ]\n});\nlet Router = createRouterComponent(router);\n\nrouter.once(() => {\n  ReactDOM.render((\n    <Router>\n      <App />\n    </Router>\n  ), document.getElementById('root'));\n});\nregisterServiceWorker();"),r.a.createElement(l.i,null,"With those changes, Webpack will now split the application into multiple bundles. The initial render will be delayed until after the code split bundle for the first route has been loaded.")),r.a.createElement(l.e,{meta:p,tag:"h2"},r.a.createElement(l.i,null,"Preloading data lets you delay navigation until after the data for a route has loaded. This can save you from having to render a partial page with spinners if the data takes a while to load."),r.a.createElement(l.i,null,"While the data is loading, the user will be able to continue interacting with the current page. This means that the user can also start a new navigation while the current navigation is running. When this happens, Curi knows to to cancel the previous navigation and perform the new navigation instead."),r.a.createElement(l.i,null,"We have two routes that need to load data: ",r.a.createElement(l.f,null,"Home")," and"," ",r.a.createElement(l.f,null,"Book"),". The ",r.a.createElement(l.f,null,"Home")," route will load the known books, while the ",r.a.createElement(l.f,null,"Book")," route will load data about a specific book."),r.a.createElement(l.i,null,"Currently the data for both of these routes is imported in their components. In a real site you would most likely make API calls to a REST or GraphQL endpoint, but here we will simulate this with a fake API."),r.a.createElement(l.e,{meta:h,tag:"h3"},r.a.createElement(l.i,null,"The fake API will simulate asynchronous calls to the server by returning Promises, similarly to the"," ",r.a.createElement("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"Fetch API"),"."),r.a.createElement(l.i,null,"First, we will create an ",r.a.createElement(l.f,null,"api.js")," module that exports the fake API functions."),r.a.createElement(l.b,{lang:"bash"},"touch src/api.js"),r.a.createElement(l.i,null,"In the API module, we will import the ",r.a.createElement(l.f,null,"books.js")," data."),r.a.createElement(l.i,null,"We need to write two functions. The first returns a list of all books and the second returns the data for a specific book. For both, we can use ",r.a.createElement(l.f,null,"Promise.resolve")," to return a Promise, even though we don't really have any asynchronous code being run."),r.a.createElement(l.b,null,'// src/api.js\nimport books from "./books";\n\nexport let BOOKS = () => Promise.resolve(books);\n\nexport let BOOK = id => Promise.resolve(\n  let intID = parseInt(id, 10);\n  books.find(b => b.id === intID)\n);')),r.a.createElement(l.i,null,"When the router is created, it can take a third argument, which is an options object. One of the properties of this object is"," ",r.a.createElement(l.f,null,"external"),", which is used to pass in external values that will be accessible in a route's ",r.a.createElement(l.f,null,"resolve")," and"," ",r.a.createElement(l.f,null,"respond")," functions. This is particularly useful for data that is initialized at runtime, like an Apollo store, but we will also use it here."),r.a.createElement(l.b,{"data-line":"11,20-22"},"// src/index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createRouter } from \"@curi/router\";\nimport { browser } from '@hickory/browser';\nimport { createRouterComponent } from '@curi/react-dom';\n\nimport routes from './routes';\nimport './index.css';\nimport NavMenu from './components/NavMenu';\nimport * as bookAPI from \"./api\";\nimport registerServiceWorker from './registerServiceWorker';\n\nlet router = createRouter(browser, routes, {\n  sideEffects: [\n    announce(({ response }) => {\n      return `Navigated to ${response.location.pathname}`;\n    })\n  ],\n  external: {\n    bookAPI\n  }\n});\nlet Router = createRouterComponent(router);\n\nrouter.once(() => {\n  ReactDOM.render((\n    <Router>\n      <App />\n    </Router>\n  ), document.getElementById('root'));\n});\nregisterServiceWorker();"),r.a.createElement(l.i,null,"What do we want to do with the data loaded from the API calls? Along with the ",r.a.createElement(l.f,null,"body")," property, another valid return property for"," ",r.a.createElement(l.f,null,"respond")," functions is ",r.a.createElement(l.f,null,"data"),". This is a convenient way to attach any data to a response, which we can read from while rendering."),r.a.createElement(l.i,null,"The ",r.a.createElement(l.f,null,"Home")," route already has an asynchronous action: importing the ",r.a.createElement(l.f,null,"body")," component. We will name the async call to load the books data ",r.a.createElement(l.f,null,'"books"'),"."),r.a.createElement(l.i,null,"The ",r.a.createElement(l.f,null,"Book")," route's ",r.a.createElement(l.f,null,"respond")," function also needs to be updated to attach the books data (",r.a.createElement(l.f,null,"resolved.books"),") to the response."),r.a.createElement(l.i,null,"The ",r.a.createElement(l.f,null,"book")," API call expects to be given the ",r.a.createElement(l.f,null,"id")," ","number of the book it should return data for. We can grab the correct param (",r.a.createElement(l.f,null,"id"),") from the ",r.a.createElement(l.f,null,"params")," property. However, when params are parsed, they are stored as strings. To convert it to a number, we can use the route's ",r.a.createElement(l.f,null,"params")," property to tell Curi how to parse the ",r.a.createElement(l.f,null,"id"),". By giving it a function that calls"," ",r.a.createElement(l.f,null,"parseInt")," on the provided value, ",r.a.createElement(l.f,null,"params.id")," will be a number instead of a string."),r.a.createElement(l.b,{"data-line":"10,13,17-21,27,30,34-38"},'// src/routes.js\nimport { prepareRoutes } from "@curi/router";\nimport { preferDefault } from "@curi/helpers";\n\nexport default prepareRoutes([\n  {\n    name: "Home",\n    path: "",\n    resolve(_, external) {\n      let body = import("./components/Home")\n        .then(preferDefault);\n      let books = external.bookAPI.BOOKS();\n      return Promise.all([body, books]);\n    },\n    respond({ resolved }) {\n      let [body, books] = resolved;\n      return {\n        body,\n        data: { books }\n      };\n    }\n  },\n  {\n    name: "Book",\n    path: "book/:id",\n    resolve({ params }, external) {\n      let body = import("./components/Book")\n        .then(preferDefault);\n      let book = external.bookAPI.BOOK(params.id);\n      return Promise.all([body, books]);\n    },\n    respond({ resolved }) {\n      let [body, book] = resolved;\n      return {\n        body,\n        data: { book }\n      };\n    }\n  },\n  {\n    name: "Checkout",\n    path: "checkout",\n    resolve() {\n      return import("./components/Checkout")\n        .then(preferDefault);\n    },\n    respond({ resolved }) {\n      return { body: resolved };\n    }\n  },\n  {\n    name: "Catch All",\n    path: "(.*)",\n    resolve() {\n      return import("./components/NotFound")\n        .then(preferDefault);\n    },\n    respond({ resolved }) {\n      return { body: resolved };\n    }\n  }\n]);'),r.a.createElement(l.i,null,"With the data attached to our responses, we can remove the data imports from the components and just read from the response."),r.a.createElement(l.i,null,"In the ",r.a.createElement(l.f,null,"Home")," component's module, we can remove the"," ",r.a.createElement(l.f,null,"books.js")," import and grab the response from the component's props. The books data can be access as ",r.a.createElement(l.f,null,"response.data.books"),"."),r.a.createElement(l.b,{lang:"jsx","data-line":"5,9"},"// src/components/Home.js\nimport React from 'react';\nimport { Link } from '@curi/react-dom';\n\nexport default function Home({ response }) {\n  return (\n    <article>\n      <ul>\n        {response.data.books.map(book => (\n          <li key={book.id}>\n            <Link name=\"Book\" params={{ id: book.id }} >\n              {book.title} by {book.author}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </article>\n  );\n}"),r.a.createElement(l.i,null,"Likewise, we can remove the ",r.a.createElement(l.f,null,"books.js")," import from the"," ",r.a.createElement(l.f,null,"Book")," component's module and grab the book data from"," ",r.a.createElement(l.f,null,"response.data")," instead of searching for it in the books array."),r.a.createElement(l.b,{lang:"jsx","data-line":"9"},"// src/components/Book.js\nimport React from 'react';\nimport { useRouter } from '@curi/react-dom';\n\nimport cart from '../cart';\n\nexport default function Book({ response }) {\n  let router = useRouter();\n  let { book } = response.data;\n  if (!book) {\n    return <article>The requested book could not be found</article>;\n  }\n  return (\n    <article>\n      <h1>{book.title}</h1>\n      <h2>by {book.author}</h2>\n      <Paragraph>Published in {book.published}</Paragraph>\n      <Paragraph>{book.pages} pages</Paragraph>\n      <button\n        type=\"button\"\n        onClick={() => {\n          cart.add(book, 1);\n          let url = router.url({ name: \"Checkout\" });\n          router.navigate({ url });\n        }}\n      >\n        Add to Cart\n      </button>\n    </article>\n  );\n};")),r.a.createElement(l.e,{meta:b,tag:"h2"},r.a.createElement(l.i,null,"At this point, we have the same functionality as the basic tutorial, but we have added async data loading. The bundle importing has real loading times, but the fake API calls resolve immediately, which doesn't necessarily reflect real world performance."),r.a.createElement(l.i,null,"We can update the fake API to delay resolving so that we can take a look at some of the ",r.a.createElement(l.f,null,"@curi/react-dom")," components that are navigation-aware. The implementation here isn't important, so you can just copy+paste the code. The only thing to know is that the"," ",r.a.createElement(l.f,null,"BOOKS")," function has a one second delay and the"," ",r.a.createElement(l.f,null,"BOOK")," function has a 2.5 second delay the first time a book is requested (and responds instantly on subsequent calls)."),r.a.createElement(l.b,null,'// src/api.js\nimport books from "./books";\n\nexport let BOOKS = () => new Promise(resolve => {\n  // artificial delay\n  setTimeout(() => {\n    resolve(books);\n  }, 1000);\n});\n\nlet BOOK_CACHE = {};\nexport let BOOK = id => new Promise(resolve => {\n  if (BOOK_CACHE[id]) {\n    resolve(BOOK_CACHE[id]);\n    return;\n  }\n  let intID = parseInt(id, 10);\n  // artificial delay on first call\n  setTimeout(() => {\n    let book = books.find(b => b.id === id);\n    BOOK_CACHE[id] = book;\n    resolve(book);\n  }, 2500);\n});'),r.a.createElement(l.e,{meta:f,tag:"h3"},r.a.createElement(l.i,null,"The ",r.a.createElement(l.f,null,"Link")," component has a sibling component called"," ",r.a.createElement(l.f,null,"AsyncLink"),", can takes a render-invoked function as its"," ",r.a.createElement(l.f,null,"children")," prop. The function is called with a"," ",r.a.createElement(l.f,null,"navigating")," boolean that indicates whether the router is currently navigating to that link. This is useful for when you know that there is a long (multiple seconds) delay between when the user clicks the link and when the navigation will occur."),r.a.createElement(l.i,null,"We can replace the ",r.a.createElement(l.f,null,"Link"),"s in the ",r.a.createElement(l.f,null,"Home")," component with ",r.a.createElement(l.f,null,"AsyncLink"),"s and use render-invoked functions to display a loading spinner while we wait for the book data to load."),r.a.createElement(l.b,{lang:"jsx"},'import { AsyncLink } from "@curi/react-dom";\n\n<AsyncLink name="Book" params={{ id: 1 }}>\n  {navigating => (\n    <React.Fragment>\n      Book 1\n      {navigating ? <Spinner /> : null}\n    </React.Fragment>\n  )}\n</AsyncLink>'),r.a.createElement(l.i,null,"We will use the"," ",r.a.createElement("a",{href:"https://github.com/KyleAMathews/react-spinkit"},r.a.createElement(l.f,null,"react-spinkit"))," ","package, which provides a variety of spinner components."),r.a.createElement(l.b,{lang:"bash"},"npm install react-spinkit"),r.a.createElement(l.i,null,"In the ",r.a.createElement(l.f,null,"Home")," component's module, we need to import the"," ",r.a.createElement(l.f,null,"Spinner")," component. The ",r.a.createElement(l.f,null,"Link")," needs to be swapped from a React element to a render-invoked function. We wrap the contents in a ",r.a.createElement(l.f,null,"React.Fragment")," to avoid unnecessary DOM elements. In the function, we render a ",r.a.createElement(l.f,null,"Spinner")," when the"," ",r.a.createElement(l.f,null,"Link")," is navigating and ",r.a.createElement(l.f,null,"null")," when it is not."),r.a.createElement(l.g,null,r.a.createElement(l.i,null,r.a.createElement(l.f,null,"react-spinkit")," is highly customizable, but we are sticking with the defaults here. ",r.a.createElement(l.f,null,"react-spinkit")," has a default one second render delay, which is why the spinner does not display immediately.")),r.a.createElement(l.b,{lang:"jsx","data-line":"3-4,12-19"},"// src/components/Home.js\nimport React from 'react';\nimport { AsyncLink } from '@curi/react-dom';\nimport Spinner from \"react-spinkit\";\n\nexport default function Home({ response }) {\n  return (\n    <article>\n      <ul>\n        {response.data.books.map(book => (\n          <li key={book.id}>\n            <AsyncLink name=\"Book\" params={{ id: book.id }} >\n              {navigating => (\n                <React.Fragment>\n                  {book.title} by {book.author}\n                  {navigating ? <Spinner /> : null}\n                </React.Fragment>\n              )}\n            </AsyncLink>\n          </li>\n        ))}\n      </ul>\n    </article>\n  );\n}"))),r.a.createElement(l.e,{meta:E,tag:"h2"},r.a.createElement(l.i,null,"Adding asynchronous loading to an application can help reduce initial load size and speed up user interactions, however it also has some issues that you will need to consider."),r.a.createElement(l.i,null,"The biggest consideration is that there is nothing the frontend can do to get the data for the initial render faster. Your application's frontend can only fetch data as it discovers it needs it. If you are performing server-side rendering, you may want to load the initial data on the server and inject it into the page's HTML output. The implementation details for this vary greatly and are more related to how you store data (e.g."," ",r.a.createElement("a",{href:"https://redux.js.org/recipes/server-rendering#the-server-side"},"with redux"),")."),r.a.createElement(l.i,null,'Another consideration is whether or not you want to "hoist" data requirements. Curi\'s async functionality relies on you knowing all of the data requirements for a route, but you might prefer to keep the data associated with individual components. React Suspense will help with this (and Curi will support it once it releases), but this is still a ways out. At the very least, I would recommend using Curi for code splitting routes. Whether your should hoist other data requirements is something that should be determined on a case-by-case basis.')))}}}]);