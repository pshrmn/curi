const glob = require("glob");
const path = require("path");
const fs = require("fs-extra");
const git = require("simple-git")(process.cwd());

const root = process.cwd();

const packagesDir = path.join(root, "packages");
const examplesDir = path.join(root, "examples");
const docsDir = path.join(root, "website");
const docConstantVersions = path.join(
  docsDir,
  "src",
  "constants",
  "versions.js"
);

console.log("Updating CHANGELOG versions...");
// This relies on a README beginning with the string "## Next".
// If those aren't the first seven characters of the file, this
// will fail.
glob.sync(`${packagesDir}/**/CHANGELOG.md`).forEach(readme => {
  const buffer = fs.readFileSync(readme);
  if (buffer.indexOf("## Next") !== 0) {
    return;
  }

  const pathname = readme.substr(0, readme.indexOf("/CHANGELOG.md"));
  const pkg = require(`${pathname}/package.json`);
  const versionBuffer = Buffer.from(`## ${pkg.version}`);
  const output = Buffer.concat([versionBuffer, buffer.slice(7)]);

  fs.outputFileSync(readme, output);
  git.add(readme);
});

console.log("Updating example dependencies...");
// get the dependencies from the actual packages
const pkgs = glob
  .sync(`${packagesDir}/**/package.json`)
  .map(pkgPath => require(pkgPath))
  .map(pkg => ({
    name: pkg.name,
    version: pkg.version
  }))
  .reduce((acc, curr) => {
    acc[curr.name] = curr.version;
    return acc;
  }, {});

glob
  .sync(`${examplesDir}/+(react|vue|svelte|misc)/*/package.json`)
  .map(pkgPath => ({
    path: pkgPath,
    module: require(pkgPath)
  }))
  .forEach(pkg => {
    Object.keys(pkg.module.dependencies).forEach(dep => {
      if (dep in pkgs) {
        pkg.module.dependencies[dep] = pkgs[dep];
      }
    });

    fs.outputFile(pkg.path, `${JSON.stringify(pkg.module, null, 2)}\n`).then(
      () => {
        git.add(pkg.path);
      },
      e => {
        console.error(`Failed to write ${pkg.path}`);
        console.error(e);
      }
    );
  });

console.log("Updating package versions in docs...");
const mappedVersions = Object.keys(pkgs).reduce((acc, name) => {
  acc[name.slice(6)] = pkgs[name];
  return acc;
}, {});

fs.writeFile(
  docConstantVersions,
  `// this file is automatically generated
export default ${JSON.stringify(mappedVersions, null, 2)};\n`,
  function(err) {
    if (err) {
      console.error(err);
    } else {
      git.add(docConstantVersions);
    }
  }
);
